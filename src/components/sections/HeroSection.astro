---
import { getImage } from "astro:assets";

import bgGrid from "../../images/bg-grid.svg";
const heroBg = await getImage({ src: bgGrid, format: "svg" });
import Button from "../element/Button.astro";
---

<section class="w-full h-screen py-40 overflow-hidden relative">
  <div class="h-full absolute w-full top-0 z-30" style={`background-image: url(${heroBg.src});`}>
  </div>
  <div class="top-0 left-0 z-20 bg-red-200 w-screen h-screen absolute opacity-20"></div>

  <div class="glow"></div>

  <!-- <div class="container mx-auto max-w-screen-xl p-5">
    <div class="font-heading flex sm:justify-start justify-center mt-10 mb-10">
      <p class="sm:text-4xl text-lg mr-3 text-gray-600">
        Organize
        <span class="bg-gradient-to-r from-cyan-500 to-blue-500 align-middle p-2 inline-block w-fit rounded-full"
        ></span>
      </p>
      <p class="sm:text-4xl text-lg mr-3 text-gray-600">
        Participate
        <span class="bg-gradient-to-r from-red-500 to-amber-500 p-2 inline-block w-fit align-middle rounded-full"
        ></span>
      </p>
      <p class="sm:text-4xl text-lg text-gray-600">Attend</p>
    </div>
    <h1 class="text-7xl font-heading">
      <span class="flex items-end flex-wrap">
        <span> Tech</span>
        <span class="overflow-hidden block h-[100px] ml-5">
          <span class="spin text-orange-500">Events</span>
          <span class="spin text-cyan-500">Hangouts</span>
          <span class="spin text-red-500">Festivals</span>
          <span class="spin text-teal-500">Summits</span>
          <span class="spin text-emerald-500">Parties</span>
          <span class="spin text-indigo-500">Workshops</span>
          <span class="spin text-orange-500">Events</span>
        </span>
        <span class="block w-full mt-8"> in Africa</span>
      </span>
    </h1>

    <div class="flex sm:flex-row flex-col text-center sm:gap-10 gap-5 mt-10">
      <Button href="/events" label="Explore Events" size="lg" style="primary" />
      <Button href="/host-event" label="Host an Events" size="lg" style="secondary" />
    </div>
  </div> -->
</section>

<style>
  .glow {
    height: 300px;
    width: 300px;
    z-index: 20;
    top: 10rem;
    left: 20rem;
    background: radial-gradient(
      circle,
      rgba(0, 0, 0.1) 10%,
      rgba(0, 0, 0.1) 35%,
      rgba(0, 0, 0.1) 55%,
      rgba(0, 0, 0.1) 59%,
      rgba(0, 0, 0.1) 89%
    );
    transition: opacity 0.5s cubic-bezier(0.64, 0.04, 0.35, 1);
    filter: blur(10px);
    opacity: 1;
    position: absolute;
  }
  .glow::before {
    content: "";
    display: block;
    top: -7rem;
    left: -6rem;
    width: 500px;
    height: 500px;
    border-radius: 50%;
    opacity: 0.8;
    z-index: 20;
    background: radial-gradient(circle, rgba(0, 0, 0, 1) 10%, rgba(0, 0, 0, 0.5) 35%);
    transition: opacity 0.5s cubic-bezier(0.64, 0.04, 0.35, 1);
    filter: blur(20px);
    position: absolute;
  }

  @keyframes spin_words {
    10% {
      transform: translateY(-82%);
    }
    20% {
      transform: translateY(-70%);
    }
    30% {
      transform: translateY(-182%);
    }
    40% {
      transform: translateY(-170%);
    }
    50% {
      transform: translateY(-282%);
    }
    60% {
      transform: translateY(-270%);
    }
    70% {
      transform: translateY(-382%);
    }
    80% {
      transform: translateY(-370%);
    }
    90% {
      transform: translateY(-482%);
    }
    100% {
      transform: translateY(-470%);
    }
  }
  .grid-design {
    background: #111112;
    border-top-left-radius: 0;
    border-top-right-radius: 0;
    border-radius: 10px;
    position: relative;
    margin: 0 1px 1px 0;
    z-index: 10;
  }
</style>

<script>
  import { gsap } from "gsap";

  // gsap.to(".reveal", {
  //   y: 180,
  //   duration: 5,
  //   stagger: 0.3,
  //   repeat: -1,
  //   keyframes: [{ y: -200, duration: 0.5 }],
  //   modifiers: {
  //     // y: gsap.utils.unitize((y) => parseFloat(y) % 200), //force x value to be between 0 and 500 using modulus
  //   },
  // });

  // Function to generate random number within a range
  // const getRandomNumber = (min: number, max: number) => Math.random() * (max - min) + min;
  // // Function to set random position
  // const BOX_SIZE = 50;

  // // Function to set random position within the viewport
  // const setRandomPosition = (): { x: number, y: number } => {
  //   const maxX = window.innerWidth - BOX_SIZE;
  //   const maxY = window.innerHeight - BOX_SIZE;
  //   return {
  //     x: getRandomNumber(0, maxX),
  //     y: getRandomNumber(0, maxY),
  //   };
  // };

  // // Function to animate the box within the viewport
  // const animateBox = (box: HTMLElement, onComplete: () => { x: number, y: number }): void => {
  //   gsap.to(box, {
  //     x: onComplete().x,
  //     y: onComplete().y,
  //     duration: 2,
  //     onComplete,
  //     ease: 'power1.inOut',
  //     repeat: -1
  //   });
  // };

  // // Main function
  // const main = (): void => {
  //   const movingBox = document.querySelector('.reveal') as HTMLElement;

  //   // Set initial random position
  //   const initialPosition = setRandomPosition();
  //   movingBox.style.left = `${initialPosition.x}px`;
  //   movingBox.style.top = `${initialPosition.y}px`;

  //   // Start the animation
  //   animateBox(movingBox, setRandomPosition);
  // };

  // // Call the main function when the DOM is ready
  // document.addEventListener('DOMContentLoaded', main);

  // index.ts
  // index.ts
  const BOX_SIZE = 350;

  console.log(document.documentElement.clientWidth);
  // Function to generate random number within a range
  const getRandomNumber = (min: number, max: number): number =>
    Math.round(Math.random() * (max - min) + min);
  console.log(getRandomNumber(0, 500));

  // Function to set random position within the viewport
  const setRandomPosition = (): { x: number; y: number } => {
    const maxX = document.documentElement.clientWidth - BOX_SIZE;
    const maxY = document.documentElement.clientHeight - BOX_SIZE;
    return {
      x: getRandomNumber(0, maxX),
      y: getRandomNumber(0, maxY),
    };
  };

  // Function to animate the box within the viewport
  const animateBox = (box: HTMLElement): void => {
    gsap.to(box, {
      x: setRandomPosition().x,
      y: setRandomPosition().y,
      duration: 2,
      onComplete: () => animateBox(box),
      ease: "power1.inOut",
    });
  };

  // Main function
  const main = (): void => {
    const movingBox = document.querySelector(".glow") as HTMLElement;

    // Set initial random position
    const initialPosition = setRandomPosition();
    // movingBox.style.right = `${initialPosition.x}px`;
    // movingBox.style.bottom = `${initialPosition.y}px`;
    movingBox.style.left = `-${initialPosition.x}px`;
    movingBox.style.top = `-${initialPosition.y}px`;

    // Start the animation
    animateBox(movingBox);
  };

  // Call the main function when the DOM is ready
  document.addEventListener("DOMContentLoaded", main);
</script>
